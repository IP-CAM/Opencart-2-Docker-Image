diff --git a/upload/admin/controller/common/filemanager.php b/upload/admin/controller/common/filemanager.php
index 2b638517c..d299e51b4 100644
--- a/upload/admin/controller/common/filemanager.php
+++ b/upload/admin/controller/common/filemanager.php
@@ -45,7 +45,7 @@ class ControllerCommonFileManager extends Controller {
 			}
 
 			// Get files
-			$files = glob($directory . '/' . $filter_name . '*.{jpg,jpeg,png,gif,JPG,JPEG,PNG,GIF}', GLOB_BRACE);
+			$files = \Zend\Stdlib\Glob::glob($directory . '/' . $filter_name . '*.{jpg,jpeg,png,gif,JPG,JPEG,PNG,GIF}', \Zend\Stdlib\Glob::GLOB_BRACE);
 
 			if (!$files) {
 				$files = array();
diff --git a/upload/admin/controller/common/security.php b/upload/admin/controller/common/security.php
index 07cfb9fa7..9ed2c5cdd 100644
--- a/upload/admin/controller/common/security.php
+++ b/upload/admin/controller/common/security.php
@@ -9,20 +9,8 @@ class ControllerCommonSecurity extends Controller {
 		
 		$data['storage'] = DIR_SYSTEM . 'storage/';
 		
-		$path = '';
-		
-		$data['paths'] = array();
-		
-		$parts = explode('/', str_replace('\\', '/', rtrim(DIR_SYSTEM, '/')));	
-		
-		foreach ($parts as $part) {
-			$path .= $part . '/';
-			
-			$data['paths'][] = $path;
-		}
-		
-		rsort($data['paths']);	
-			
+		$data['paths'] = array("/data/");
+
 		$data['document_root'] = str_replace('\\', '/', realpath($this->request->server['DOCUMENT_ROOT'] . '/../') . '/');
 
 		return $this->load->view('common/security', $data);
@@ -52,7 +40,7 @@ class ControllerCommonSecurity extends Controller {
 				$data['error'] = $this->language->get('error_path');		
 			}
 			
-			if (!$path || str_replace('\\', '/', realpath($path)) . '/' != str_replace('\\', '/', substr(DIR_SYSTEM, 0, strlen($path)))) {
+			if (!$path) {
 				$json['error'] = $this->language->get('error_path');
 			}
 					
@@ -96,7 +84,7 @@ class ControllerCommonSecurity extends Controller {
 	
 				// Copy the 
 				foreach ($files as $file) {
-					$destination = $path . $directory . substr($file, strlen(DIR_SYSTEM . 'storage/'));
+					$destination = $path . $directory . "/" . substr($file, strlen(DIR_SYSTEM . 'storage/'));
 					
 					if (is_dir($file) && !is_dir($destination)) {
 						mkdir($destination, 0777);
diff --git a/upload/admin/controller/design/theme.php b/upload/admin/controller/design/theme.php
index 839d03f22..fc24b4884 100644
--- a/upload/admin/controller/design/theme.php
+++ b/upload/admin/controller/design/theme.php
@@ -120,7 +120,7 @@ class ControllerDesignTheme extends Controller {
 			$path_data = array();
 
 			// We grab the files from the default theme directory first as the custom themes drops back to the default theme if selected theme files can not be found.
-			$files = glob(rtrim(DIR_CATALOG . 'view/theme/{default,' . $theme . '}/template/' . $path, '/') . '/*', GLOB_BRACE);
+			$files = \Zend\Stdlib\Glob::glob(rtrim(DIR_CATALOG . 'view/theme/{default,' . $theme . '}/template/' . $path, '/') . '/*', \Zend\Stdlib\Glob::GLOB_BRACE);
 
 			if ($files) {
 				foreach($files as $file) {
diff --git a/upload/admin/controller/marketplace/extension.php b/upload/admin/controller/marketplace/extension.php
index 046fd1091..6af1f7020 100644
--- a/upload/admin/controller/marketplace/extension.php
+++ b/upload/admin/controller/marketplace/extension.php
@@ -29,7 +29,7 @@ class ControllerMarketplaceExtension extends Controller {
 		
 		$data['categories'] = array();
 		
-		$files = glob(DIR_APPLICATION . 'controller/extension/extension/*.php', GLOB_BRACE);
+		$files = \Zend\Stdlib\Glob::glob(DIR_APPLICATION . 'controller/extension/extension/*.php', \Zend\Stdlib\Glob::GLOB_BRACE);
 		
 		foreach ($files as $file) {
 			$extension = basename($file, '.php');
@@ -38,7 +38,7 @@ class ControllerMarketplaceExtension extends Controller {
 			$this->load->language('extension/extension/' . $extension, 'extension');
 		
 			if ($this->user->hasPermission('access', 'extension/extension/' . $extension)) {
-				$files = glob(DIR_APPLICATION . 'controller/extension/' . $extension . '/*.php', GLOB_BRACE);
+				$files = \Zend\Stdlib\Glob::glob(DIR_APPLICATION . 'controller/extension/' . $extension . '/*.php', \Zend\Stdlib\Glob::GLOB_BRACE);
 		
 				$data['categories'][] = array(
 					'code' => $extension,
diff --git a/upload/admin/controller/marketplace/modification.php b/upload/admin/controller/marketplace/modification.php
index f094fc130..d58fafce3 100644
--- a/upload/admin/controller/marketplace/modification.php
+++ b/upload/admin/controller/marketplace/modification.php
@@ -177,7 +177,7 @@ class ControllerMarketplaceModification extends Controller {
 						}
 
 						if ($path) {
-							$files = glob($path, GLOB_BRACE);
+							$files = \Zend\Stdlib\Glob::glob($path, \Zend\Stdlib\Glob::GLOB_BRACE);
 
 							if ($files) {
 								foreach ($files as $file) {
diff --git a/upload/catalog/model/account/api.php b/upload/catalog/model/account/api.php
index 8cce5cfe1..72047f970 100644
--- a/upload/catalog/model/account/api.php
+++ b/upload/catalog/model/account/api.php
@@ -1,7 +1,7 @@
 <?php
 class ModelAccountApi extends Model {
 	public function login($username, $key) {
-		$query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "api` WHERE `username` = '" . $this->db->escape($username) . "' `key` = '" . $this->db->escape($key) . "' AND status = '1'");
+		$query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "api` WHERE `username` = '" . $this->db->escape($username) . "' AND `key` = '" . $this->db->escape($key) . "' AND status = '1'");
 
 		return $query->row;
 	}
diff --git a/upload/install/model/upgrade/1001.php b/upload/install/model/upgrade/1001.php
index 89c651804..1efb24fb9 100644
--- a/upload/install/model/upgrade/1001.php
+++ b/upload/install/model/upgrade/1001.php
@@ -157,7 +157,7 @@ class ModelUpgrade1001 extends Model {
 
 		// Update the config.php by adding a DIR_MODIFICATION
 		if (is_file(DIR_OPENCART . 'config.php')) {
-			$files = glob(DIR_OPENCART . '{config.php,admin/config.php}', GLOB_BRACE);
+			$files = \Zend\Stdlib\Glob::glob(DIR_OPENCART . '{config.php,admin/config.php}', \Zend\Stdlib\Glob::GLOB_BRACE);
 
 			foreach ($files as $file) {
 				if (!is_writable($file)) {
diff --git a/upload/install/model/upgrade/1006.php b/upload/install/model/upgrade/1006.php
index 5d9b7e5d1..be2643c2a 100644
--- a/upload/install/model/upgrade/1006.php
+++ b/upload/install/model/upgrade/1006.php
@@ -13,7 +13,7 @@ class ModelUpgrade1006 extends Model {
 
 		// Update the config.php by adding a DB_PORT
 		if (is_file(DIR_OPENCART . 'config.php')) {
-			$files = glob(DIR_OPENCART . '{config.php,admin/config.php}', GLOB_BRACE);
+			$files = \Zend\Stdlib\Glob::glob(DIR_OPENCART . '{config.php,admin/config.php}', \Zend\Stdlib\Glob::GLOB_BRACE);
 
 			foreach ($files as $file) {
 				$upgrade = true;
@@ -51,7 +51,7 @@ class ModelUpgrade1006 extends Model {
 
 		// Update the config.php to add /storage/ to paths
 		if (is_file(DIR_OPENCART . 'config.php')) {
-			$files = glob(DIR_OPENCART . '{config.php,admin/config.php}', GLOB_BRACE);
+			$files = \Zend\Stdlib\Glob::glob(DIR_OPENCART . '{config.php,admin/config.php}', \Zend\Stdlib\Glob::GLOB_BRACE);
 
 			foreach ($files as $file) {
 				$upgrade = true;
diff --git a/upload/install/model/upgrade/1009.php b/upload/install/model/upgrade/1009.php
index ca129e1b1..d68f57caf 100644
--- a/upload/install/model/upgrade/1009.php
+++ b/upload/install/model/upgrade/1009.php
@@ -120,7 +120,7 @@ class ModelUpgrade1009 extends Model {
 			fclose($handle);
 		}
 	
-		$files = glob(DIR_OPENCART . '{config.php,admin/config.php}', GLOB_BRACE);
+		$files = \Zend\Stdlib\Glob::glob(DIR_OPENCART . '{config.php,admin/config.php}', \Zend\Stdlib\Glob::GLOB_BRACE);
 
 		foreach ($files as $file) {
 			$lines = file($file);
diff --git a/upload/system/helper/glob.php b/upload/system/helper/glob.php
index e69de29bb..a643a24ed 100644
--- a/upload/system/helper/glob.php
+++ b/upload/system/helper/glob.php
@@ -0,0 +1,193 @@
+<?php
+/**
+ * Zend Framework (http://framework.zend.com/)
+ *
+ * @link      http://github.com/zendframework/zf2 for the canonical source repository
+ * @copyright Copyright (c) 2005-2015 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license   http://framework.zend.com/license/new-bsd New BSD License
+ */
+
+namespace Zend\Stdlib;
+
+/**
+ * Wrapper for glob with fallback if GLOB_BRACE is not available.
+ */
+abstract class Glob
+{
+    /**#@+
+     * Glob constants.
+     */
+    const GLOB_MARK     = 0x01;
+    const GLOB_NOSORT   = 0x02;
+    const GLOB_NOCHECK  = 0x04;
+    const GLOB_NOESCAPE = 0x08;
+    const GLOB_BRACE    = 0x10;
+    const GLOB_ONLYDIR  = 0x20;
+    const GLOB_ERR      = 0x40;
+    /**#@-*/
+
+    /**
+     * Find pathnames matching a pattern.
+     *
+     * @see    http://docs.php.net/glob
+     * @param  string  $pattern
+     * @param  int $flags
+     * @param  bool $forceFallback
+     * @return array
+     */
+    public static function glob($pattern, $flags = 0, $forceFallback = false)
+    {
+        if (! defined('GLOB_BRACE') || $forceFallback) {
+            return static::fallbackGlob($pattern, $flags);
+        }
+
+        return static::systemGlob($pattern, $flags);
+    }
+
+    /**
+     * Use the glob function provided by the system.
+     *
+     * @param  string  $pattern
+     * @param  int     $flags
+     * @return array
+     */
+    protected static function systemGlob($pattern, $flags)
+    {
+        if ($flags) {
+            $flagMap = [
+                self::GLOB_MARK     => GLOB_MARK,
+                self::GLOB_NOSORT   => GLOB_NOSORT,
+                self::GLOB_NOCHECK  => GLOB_NOCHECK,
+                self::GLOB_NOESCAPE => GLOB_NOESCAPE,
+                self::GLOB_BRACE    => defined('GLOB_BRACE') ? GLOB_BRACE : 0,
+                self::GLOB_ONLYDIR  => GLOB_ONLYDIR,
+                self::GLOB_ERR      => GLOB_ERR,
+            ];
+
+            $globFlags = 0;
+
+            foreach ($flagMap as $internalFlag => $globFlag) {
+                if ($flags & $internalFlag) {
+                    $globFlags |= $globFlag;
+                }
+            }
+        } else {
+            $globFlags = 0;
+        }
+
+        return glob($pattern, $globFlags);
+    }
+
+    /**
+     * Expand braces manually, then use the system glob.
+     *
+     * @param  string  $pattern
+     * @param  int     $flags
+     * @return array
+     */
+    protected static function fallbackGlob($pattern, $flags)
+    {
+        if (! $flags & self::GLOB_BRACE) {
+            return static::systemGlob($pattern, $flags);
+        }
+
+        $flags &= ~self::GLOB_BRACE;
+        $length = strlen($pattern);
+        $paths  = [];
+
+        if ($flags & self::GLOB_NOESCAPE) {
+            $begin = strpos($pattern, '{');
+        } else {
+            $begin = 0;
+
+            while (true) {
+                if ($begin === $length) {
+                    $begin = false;
+                    break;
+                } elseif ($pattern[$begin] === '\\' && ($begin + 1) < $length) {
+                    $begin++;
+                } elseif ($pattern[$begin] === '{') {
+                    break;
+                }
+
+                $begin++;
+            }
+        }
+
+        if ($begin === false) {
+            return static::systemGlob($pattern, $flags);
+        }
+
+        $next = static::nextBraceSub($pattern, $begin + 1, $flags);
+
+        if ($next === null) {
+            return static::systemGlob($pattern, $flags);
+        }
+
+        $rest = $next;
+
+        while ($pattern[$rest] !== '}') {
+            $rest = static::nextBraceSub($pattern, $rest + 1, $flags);
+
+            if ($rest === null) {
+                return static::systemGlob($pattern, $flags);
+            }
+        }
+
+        $p = $begin + 1;
+
+        while (true) {
+            $subPattern = substr($pattern, 0, $begin)
+                . substr($pattern, $p, $next - $p)
+                . substr($pattern, $rest + 1);
+
+            $result = static::fallbackGlob($subPattern, $flags | self::GLOB_BRACE);
+
+            if ($result) {
+                $paths = array_merge($paths, $result);
+            }
+
+            if ($pattern[$next] === '}') {
+                break;
+            }
+
+            $p    = $next + 1;
+            $next = static::nextBraceSub($pattern, $p, $flags);
+        }
+
+        return array_unique($paths);
+    }
+
+    /**
+     * Find the end of the sub-pattern in a brace expression.
+     *
+     * @param  string  $pattern
+     * @param  int $begin
+     * @param  int $flags
+     * @return int|null
+     */
+    protected static function nextBraceSub($pattern, $begin, $flags)
+    {
+        $length  = strlen($pattern);
+        $depth   = 0;
+        $current = $begin;
+
+        while ($current < $length) {
+            if (! $flags & self::GLOB_NOESCAPE && $pattern[$current] === '\\') {
+                if (++$current === $length) {
+                    break;
+                }
+
+                $current++;
+            } else {
+                if (($pattern[$current] === '}' && $depth-- === 0) || ($pattern[$current] === ',' && $depth === 0)) {
+                    break;
+                } elseif ($pattern[$current++] === '{') {
+                    $depth++;
+                }
+            }
+        }
+
+        return ($current < $length ? $current : null);
+    }
+}
diff --git a/upload/system/startup.php b/upload/system/startup.php
index 3c5ae9512..1b3077836 100644
--- a/upload/system/startup.php
+++ b/upload/system/startup.php
@@ -7,6 +7,8 @@ if (version_compare(phpversion(), '5.4.0', '<') == true) {
 	exit('PHP5.4+ Required');
 }
 
+require_once(DIR_SYSTEM . "helper/glob.php");
+
 if (!ini_get('date.timezone')) {
 	date_default_timezone_set('UTC');
 }
